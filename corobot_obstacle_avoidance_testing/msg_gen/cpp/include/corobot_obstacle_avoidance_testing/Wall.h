/* Auto-generated by genmsg_cpp for file /home/corobot/corobot_ws/src/corobot_obstacle_avoidance_testing/msg/Wall.msg */
#ifndef COROBOT_OBSTACLE_AVOIDANCE_TESTING_MESSAGE_WALL_H
#define COROBOT_OBSTACLE_AVOIDANCE_TESTING_MESSAGE_WALL_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace corobot_obstacle_avoidance_testing
{
template <class ContainerAllocator>
struct Wall_ {
  typedef Wall_<ContainerAllocator> Type;

  Wall_()
  : rleft(0.0)
  , thetaleft(0.0)
  , conf_left(0)
  , is_wall_left(false)
  , rright(0.0)
  , thetaright(0.0)
  , conf_right(0)
  , is_wall_right(false)
  , tdiv(0)
  , height(0)
  , accumulator()
  {
  }

  Wall_(const ContainerAllocator& _alloc)
  : rleft(0.0)
  , thetaleft(0.0)
  , conf_left(0)
  , is_wall_left(false)
  , rright(0.0)
  , thetaright(0.0)
  , conf_right(0)
  , is_wall_right(false)
  , tdiv(0)
  , height(0)
  , accumulator(_alloc)
  {
  }

  typedef float _rleft_type;
  float rleft;

  typedef float _thetaleft_type;
  float thetaleft;

  typedef int32_t _conf_left_type;
  int32_t conf_left;

  typedef uint8_t _is_wall_left_type;
  uint8_t is_wall_left;

  typedef float _rright_type;
  float rright;

  typedef float _thetaright_type;
  float thetaright;

  typedef int32_t _conf_right_type;
  int32_t conf_right;

  typedef uint8_t _is_wall_right_type;
  uint8_t is_wall_right;

  typedef uint32_t _tdiv_type;
  uint32_t tdiv;

  typedef uint32_t _height_type;
  uint32_t height;

  typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _accumulator_type;
  std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  accumulator;


  typedef boost::shared_ptr< ::corobot_obstacle_avoidance_testing::Wall_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::corobot_obstacle_avoidance_testing::Wall_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Wall
typedef  ::corobot_obstacle_avoidance_testing::Wall_<std::allocator<void> > Wall;

typedef boost::shared_ptr< ::corobot_obstacle_avoidance_testing::Wall> WallPtr;
typedef boost::shared_ptr< ::corobot_obstacle_avoidance_testing::Wall const> WallConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::corobot_obstacle_avoidance_testing::Wall_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::corobot_obstacle_avoidance_testing::Wall_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace corobot_obstacle_avoidance_testing

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::corobot_obstacle_avoidance_testing::Wall_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::corobot_obstacle_avoidance_testing::Wall_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::corobot_obstacle_avoidance_testing::Wall_<ContainerAllocator> > {
  static const char* value() 
  {
    return "b9dcd15249d280cbfabbb015f7ba5fce";
  }

  static const char* value(const  ::corobot_obstacle_avoidance_testing::Wall_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xb9dcd15249d280cbULL;
  static const uint64_t static_value2 = 0xfabbb015f7ba5fceULL;
};

template<class ContainerAllocator>
struct DataType< ::corobot_obstacle_avoidance_testing::Wall_<ContainerAllocator> > {
  static const char* value() 
  {
    return "corobot_obstacle_avoidance_testing/Wall";
  }

  static const char* value(const  ::corobot_obstacle_avoidance_testing::Wall_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::corobot_obstacle_avoidance_testing::Wall_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float32 rleft\n\
float32 thetaleft\n\
int32 conf_left\n\
bool is_wall_left\n\
\n\
float32 rright\n\
float32 thetaright\n\
int32 conf_right\n\
bool is_wall_right\n\
\n\
uint32 tdiv\n\
uint32 height\n\
int32[] accumulator\n\
\n\
";
  }

  static const char* value(const  ::corobot_obstacle_avoidance_testing::Wall_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::corobot_obstacle_avoidance_testing::Wall_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.rleft);
    stream.next(m.thetaleft);
    stream.next(m.conf_left);
    stream.next(m.is_wall_left);
    stream.next(m.rright);
    stream.next(m.thetaright);
    stream.next(m.conf_right);
    stream.next(m.is_wall_right);
    stream.next(m.tdiv);
    stream.next(m.height);
    stream.next(m.accumulator);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Wall_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::corobot_obstacle_avoidance_testing::Wall_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::corobot_obstacle_avoidance_testing::Wall_<ContainerAllocator> & v) 
  {
    s << indent << "rleft: ";
    Printer<float>::stream(s, indent + "  ", v.rleft);
    s << indent << "thetaleft: ";
    Printer<float>::stream(s, indent + "  ", v.thetaleft);
    s << indent << "conf_left: ";
    Printer<int32_t>::stream(s, indent + "  ", v.conf_left);
    s << indent << "is_wall_left: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_wall_left);
    s << indent << "rright: ";
    Printer<float>::stream(s, indent + "  ", v.rright);
    s << indent << "thetaright: ";
    Printer<float>::stream(s, indent + "  ", v.thetaright);
    s << indent << "conf_right: ";
    Printer<int32_t>::stream(s, indent + "  ", v.conf_right);
    s << indent << "is_wall_right: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_wall_right);
    s << indent << "tdiv: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.tdiv);
    s << indent << "height: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.height);
    s << indent << "accumulator[]" << std::endl;
    for (size_t i = 0; i < v.accumulator.size(); ++i)
    {
      s << indent << "  accumulator[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.accumulator[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // COROBOT_OBSTACLE_AVOIDANCE_TESTING_MESSAGE_WALL_H

